generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id              String  @id @default(uuid())
  email           String  @unique @db.VarChar(255)
  password        String? @db.VarChar(255)
  nickname        String  @unique @db.VarChar(255)
  profile         String
  signupChannelId Int     @map("signup_channel_id")
  oAuthProviderId Int?    @map("oauth_provider_id")
  roleId          Int     @map("role_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  articleComments articleComment[]
  articles        articles[]
  oAuthProvider   oAuthProvider?    @relation(fields: [oAuthProviderId], references: [id])
  signupChannel   userSignupChannel @relation(fields: [signupChannelId], references: [id])
  userRole        userRole          @relation(fields: [roleId], references: [id])

  @@index([email, nickname])
  @@map("Users")
}

model userSignupChannel {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")
  users      users[]

  @@index([name])
  @@map("UserSignupChannels")
}

model userRole {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")
  users      users[]

  @@index([name])
  @@map("UserRoles")
}

model oAuthData {
  id         Int     @id @default(autoincrement())
  email      String  @db.VarChar(255)
  providerId Int     @map("provider_id")
  profile    String?
  data       String  @db.Text
  token      String  @db.Text

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  provider oAuthProvider @relation(fields: [providerId], references: [id])

  @@index([email, providerId])
  @@map("OAuthData")
}

model oAuthProvider {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  oAuthData oAuthData[]
  users     users[]

  @@index([name])
  @@map("oAuthProviders")
}

model articles {
  id           String  @id @db.VarChar(255)
  title        String  @db.VarChar(255)
  userId       String  @map("user_id")
  summary      String  @db.VarChar(255)
  content      String  @db.Text
  thumbnail    String? @db.VarChar(255)
  viewCount    Int     @default(0) @map("view_cnt")
  likeCount    Int     @default(0) @map("like_cnt")
  commentCount Int     @default(0) @map("comment_cnt")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  ArticleTag      articleTag[]
  ArticleCategory articleCategory[]
  ArticleComment  articleComment[]

  user        users         @relation(fields: [userId], references: [id])
  articleLike articleLike[]

  @@map("Articles")
}

model ArticleViewTrend {
  id        Int      @id @default(autoincrement())
  viewCount Int
  date      DateTime @default(now())

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  @@map("ArticleViewTrend")
}

model articleLike {
  id        Int    @id @default(autoincrement())
  articleId String @map("article_id") @db.VarChar(255)
  userId    String @map("user_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article articles @relation(fields: [articleId], references: [id])

  @@map("ArticleLike")
}

model tags {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  ArticleTag articleTag[]

  @@map("Tags")
}

model articleTag {
  articleId String @map("article_id") @db.VarChar(255)
  tagId     Int    @map("tag_id")
  sort      Int

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article articles @relation(fields: [articleId], references: [id])
  tags    tags     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("ArticleTags")
}

model category {
  id       Int    @id @default(autoincrement())
  parentId Int?   @map("parent_id")
  name     String @unique @db.Char(20)
  param    String @unique @db.Char(50)
  sort     Int

  createAt        DateTime          @default(now()) @map("create_at")
  createUser      String            @default("_system") @map("create_user")
  updateAt        DateTime          @updatedAt @map("update_at")
  updateUser      String            @default("_system") @map("update_user")
  deleteAt        DateTime?         @map("delete_at")
  deleteUser      String?           @map("delete_user")
  ArticleCategory articleCategory[]

  @@map("Categories")
}

model articleCategory {
  articleId  String @map("article_id") @db.VarChar(255)
  categoryId Int    @map("category_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article  articles @relation(fields: [articleId], references: [id])
  category category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
  @@map("ArticleCategories")
}

model articleComment {
  id        Int    @id @default(autoincrement())
  articleId String @map("article_id") @db.VarChar(255)
  userId    String @map("user_id")
  content   String @db.Text

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @default("_system") @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @default("_system") @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article articles @relation(fields: [articleId], references: [id])
  user    users    @relation(fields: [userId], references: [id])

  @@map("ArticleComments")
}
