generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id              String @id @default(uuid())
  email           String @unique @db.VarChar(255)
  password        String @db.VarChar(255)
  nickname        String @unique @db.VarChar(255)
  signUpChannelId Int    @map("signup_channel_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  signUpChannel  usersSignUpChannel @relation(fields: [signUpChannelId], references: [id])
  ArticleComment articleComment[]
  Article        article[]

  @@index([email])
  @@map("Users")
}

model usersSignUpChannel {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  users users[]

  @@index([name])
  @@map("UsersSignUpChannel")
}

model externalOAuthData {
  email      String @id @db.VarChar(255)
  providerId Int    @map("provider_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  provider externalOAuthProviders @relation(fields: [providerId], references: [id])

  @@index([email, providerId])
  @@map("ExternalOAuthData")
}

model externalOAuthProviders {
  id       Int    @id @default(autoincrement())
  provider String @unique @db.VarChar(255)

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  externalOAuthData externalOAuthData[]

  @@index([provider])
  @@map("ExternalOAuthProviders")
}

model article {
  id           String @id @db.VarChar(255)
  title        String @db.VarChar(255)
  userId       String @map("user_id")
  summary      String @db.VarChar(255)
  content      String @db.Text
  thumbnail    String @db.VarChar(255)
  viewCount    Int    @map("view_cnt")
  likeCount    Int    @map("like_cnt")
  commentCount Int    @map("comment_cnt")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  ArticleImage    articleImage[]
  ArticleTag      articleTag[]
  ArticleCategory articleCategory[]
  ArticleComment  articleComment[]

  user users @relation(fields: [userId], references: [id])

  @@map("Article")
}

model articleImage {
  id        Int    @id @default(autoincrement())
  articleId String @map("article_id") @db.VarChar(255)
  image     String @db.VarChar(255)
  sort      Int

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article article @relation(fields: [articleId], references: [id])

  @@map("ArticleImage")
}

model tag {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  createAt   DateTime     @default(now()) @map("create_at")
  createUser String       @map("create_user")
  updateAt   DateTime     @updatedAt @map("update_at")
  updateUser String       @map("update_user")
  deleteAt   DateTime?    @map("delete_at")
  deleteUser String?      @map("delete_user")
  ArticleTag articleTag[]

  @@map("Tag")
}

model articleTag {
  articleId String @map("article_id") @db.VarChar(255)
  tagId     Int    @map("tag_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article article @relation(fields: [articleId], references: [id])
  tag     tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("ArticleTag")
}

model category {
  id       Int    @id @default(autoincrement())
  parentId Int?   @map("parent_id")
  name     String @unique @db.VarChar(255)
  sort     Int

  createAt        DateTime          @default(now()) @map("create_at")
  createUser      String            @map("create_user")
  updateAt        DateTime          @updatedAt @map("update_at")
  updateUser      String            @map("update_user")
  deleteAt        DateTime?         @map("delete_at")
  deleteUser      String?           @map("delete_user")
  ArticleCategory articleCategory[]

  @@map("Category")
}

model articleCategory {
  id         Int    @id @default(autoincrement())
  articleId  String @map("article_id") @db.VarChar(255)
  categoryId Int    @map("category_id")

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article  article  @relation(fields: [articleId], references: [id])
  category category @relation(fields: [categoryId], references: [id])

  @@map("ArticleCategory")
}

model articleComment {
  id        Int    @id @default(autoincrement())
  articleId String @map("article_id") @db.VarChar(255)
  userId    String @map("user_id")
  content   String @db.Text

  createAt   DateTime  @default(now()) @map("create_at")
  createUser String    @map("create_user")
  updateAt   DateTime  @updatedAt @map("update_at")
  updateUser String    @map("update_user")
  deleteAt   DateTime? @map("delete_at")
  deleteUser String?   @map("delete_user")

  article article @relation(fields: [articleId], references: [id])
  user    users   @relation(fields: [userId], references: [id])

  @@map("ArticleComment")
}
